// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedReview extends ethereum.Event {
  get params(): AddedReview__Params {
    return new AddedReview__Params(this);
  }
}

export class AddedReview__Params {
  _event: AddedReview;

  constructor(event: AddedReview) {
    this._event = event;
  }

  get reviewer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get existingReviewableAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _reviewDecentralizedStorageURL(): string {
    return this._event.parameters[2].value.toString();
  }

  get currentBlockTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _priceToAccessReview(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AddedReviewableAddress extends ethereum.Event {
  get params(): AddedReviewableAddress__Params {
    return new AddedReviewableAddress__Params(this);
  }
}

export class AddedReviewableAddress__Params {
  _event: AddedReviewableAddress;

  constructor(event: AddedReviewableAddress) {
    this._event = event;
  }

  get newReviewableAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TimbreProtocol__reviewableAddressToReviewerToReviewObjectResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: string, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getReviewDecentralizedStorageURL(): string {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }

  getPriceToAccessReview(): BigInt {
    return this.value2;
  }

  getExists(): boolean {
    return this.value3;
  }
}

export class TimbreProtocol extends ethereum.SmartContract {
  static bind(address: Address): TimbreProtocol {
    return new TimbreProtocol("TimbreProtocol", address);
  }

  getViewerAccess(
    existingReviewableAddress: Address,
    reviewerAddress: Address
  ): boolean {
    let result = super.call(
      "getViewerAccess",
      "getViewerAccess(address,address):(bool)",
      [
        ethereum.Value.fromAddress(existingReviewableAddress),
        ethereum.Value.fromAddress(reviewerAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_getViewerAccess(
    existingReviewableAddress: Address,
    reviewerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getViewerAccess",
      "getViewerAccess(address,address):(bool)",
      [
        ethereum.Value.fromAddress(existingReviewableAddress),
        ethereum.Value.fromAddress(reviewerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  i_owner(): Address {
    let result = super.call("i_owner", "i_owner():(address)", []);

    return result[0].toAddress();
  }

  try_i_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("i_owner", "i_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reviewableAddressExists(reviewableAddress: Address): boolean {
    let result = super.call(
      "reviewableAddressExists",
      "reviewableAddressExists(address):(bool)",
      [ethereum.Value.fromAddress(reviewableAddress)]
    );

    return result[0].toBoolean();
  }

  try_reviewableAddressExists(
    reviewableAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "reviewableAddressExists",
      "reviewableAddressExists(address):(bool)",
      [ethereum.Value.fromAddress(reviewableAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reviewableAddressToReviewerToReviewObject(
    reviewableAddress: Address,
    reviewer: Address
  ): TimbreProtocol__reviewableAddressToReviewerToReviewObjectResult {
    let result = super.call(
      "reviewableAddressToReviewerToReviewObject",
      "reviewableAddressToReviewerToReviewObject(address,address):(string,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(reviewableAddress),
        ethereum.Value.fromAddress(reviewer)
      ]
    );

    return new TimbreProtocol__reviewableAddressToReviewerToReviewObjectResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_reviewableAddressToReviewerToReviewObject(
    reviewableAddress: Address,
    reviewer: Address
  ): ethereum.CallResult<
    TimbreProtocol__reviewableAddressToReviewerToReviewObjectResult
  > {
    let result = super.tryCall(
      "reviewableAddressToReviewerToReviewObject",
      "reviewableAddressToReviewerToReviewObject(address,address):(string,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(reviewableAddress),
        ethereum.Value.fromAddress(reviewer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimbreProtocol__reviewableAddressToReviewerToReviewObjectResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  reviewableAddressToReviewerToViewerToAccess(
    reviewableAddress: Address,
    reviewer: Address,
    viewer: Address
  ): boolean {
    let result = super.call(
      "reviewableAddressToReviewerToViewerToAccess",
      "reviewableAddressToReviewerToViewerToAccess(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(reviewableAddress),
        ethereum.Value.fromAddress(reviewer),
        ethereum.Value.fromAddress(viewer)
      ]
    );

    return result[0].toBoolean();
  }

  try_reviewableAddressToReviewerToViewerToAccess(
    reviewableAddress: Address,
    reviewer: Address,
    viewer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "reviewableAddressToReviewerToViewerToAccess",
      "reviewableAddressToReviewerToViewerToAccess(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(reviewableAddress),
        ethereum.Value.fromAddress(reviewer),
        ethereum.Value.fromAddress(viewer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddReviewCall extends ethereum.Call {
  get inputs(): AddReviewCall__Inputs {
    return new AddReviewCall__Inputs(this);
  }

  get outputs(): AddReviewCall__Outputs {
    return new AddReviewCall__Outputs(this);
  }
}

export class AddReviewCall__Inputs {
  _call: AddReviewCall;

  constructor(call: AddReviewCall) {
    this._call = call;
  }

  get existingReviewableAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reviewDecentralizedStorageURL(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _priceToAccessReview(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddReviewCall__Outputs {
  _call: AddReviewCall;

  constructor(call: AddReviewCall) {
    this._call = call;
  }
}

export class AddReviewableAddressCall extends ethereum.Call {
  get inputs(): AddReviewableAddressCall__Inputs {
    return new AddReviewableAddressCall__Inputs(this);
  }

  get outputs(): AddReviewableAddressCall__Outputs {
    return new AddReviewableAddressCall__Outputs(this);
  }
}

export class AddReviewableAddressCall__Inputs {
  _call: AddReviewableAddressCall;

  constructor(call: AddReviewableAddressCall) {
    this._call = call;
  }

  get newReviewableAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddReviewableAddressCall__Outputs {
  _call: AddReviewableAddressCall;

  constructor(call: AddReviewableAddressCall) {
    this._call = call;
  }
}

export class PayForViewerAccessCall extends ethereum.Call {
  get inputs(): PayForViewerAccessCall__Inputs {
    return new PayForViewerAccessCall__Inputs(this);
  }

  get outputs(): PayForViewerAccessCall__Outputs {
    return new PayForViewerAccessCall__Outputs(this);
  }
}

export class PayForViewerAccessCall__Inputs {
  _call: PayForViewerAccessCall;

  constructor(call: PayForViewerAccessCall) {
    this._call = call;
  }

  get existingReviewableAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reviewer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayForViewerAccessCall__Outputs {
  _call: PayForViewerAccessCall;

  constructor(call: PayForViewerAccessCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
